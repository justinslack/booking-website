---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';

const artists = (await getCollection('artists')).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		<style>

			main {
				width: 100vw;
				padding-inline: 5rem;
				padding-block-start: 6rem;

				@media (max-width: 768px) {
  				padding-inline: 2rem;
				}
			}

.artists-container {
	display: grid;
	grid-template-columns: 3fr 1fr;
	gap: 10rem;

	@media (max-width: 768px) {
  grid-template-columns: 1fr; /* One column layout */
  gap: 2rem;
	 } /* Adjust gap for smaller screens */
}

.artists-list {
	margin-block-start: 2rem;
	display: grid;
  grid-template-columns: 1fr 1fr 1fr;
	gap: 2rem;

	@media (max-width: 768px) {
  grid-template-columns: 1fr 1fr; /* One column layout */
  gap: 2rem;
	}
	
	@media (max-width: 400px) {
  grid-template-columns: 1fr; /* One column layout */
  gap: 2rem;/* Adjust gap for smaller screens */
	}
}


.artist-card {
	background: var(--block-bg); 
	padding: 2rem;
	display: flex;
	flex-direction: column;
  position: relative;
  /* transition: all 0.25s; */
  transition-behavior: allow-discrete;
  opacity: 1;
  scale: 1;
	text-decoration: none;
	transition: all 0.25s ease;
}

.artist-card:hover {
	background: var(--block-hover);
}

.artist-info {
	width: 100%;
	height: 100%;
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: center;
	text-align: center;

	.date {
		margin: 0;
		color: rgb(var(--gray));
	}
}

.artist-card.hide {
	display: none;
  opacity: 0;
  width: 0;
}


.tag-filter {


	p {
		margin: 0;
		font-size: 1rem;
		font-weight: 700;
		text-transform: uppercase;
	}

	button {
		background: none;
		display: block;
		font-family: inherit;
		border: none;
		color: rgba(var(--black));
		font-size: 1rem;
		cursor: pointer;
		padding: 0.5rem 0 0;
		transition: 0.2s ease;
		text-align: left;
		color: rgba(var(--black), 60%);
		text-decoration: underline;
		text-decoration-color: rgba(var(--black), 20%);
		text-underline-offset: 2px;
	}
}

.tag-button.active {
	font-weight: 700;
	color: rgba(var(--black));
	text-decoration-color: rgba(var(--black), 80%);
}
			
			.title {
				margin-block-start: 2rem;
				font-size: 1.5rem;
				color: rgb(var(--black));
				line-height: 1;
			}
			.date {
				margin: 0;
				color: rgb(var(--gray));
			}


			
		
		</style>
	</head>
	<body>
		<Header />
		<main>
			<h1>Our artists</h1>
			<div class="artists-container">
				<section id="artists-list" class="artists-list">
					{
						artists.map((post) => (
							
								<a href={`/artists/${post.slug}/`} data-tags={post.data.tags.join(",")} class="artist-card">
									<img width={720} height={360} src={post.data.heroImage} alt="" />
									<article class="artist-info">
										<h4 class="title">{post.data.title}</h4>
										{/* <p class="date">
											<FormattedDate date={post.data.pubDate} />
										</p> */}
									</article>
								</a>
							
						))
					}
				</section>
				<div id="tag-filter" class="tag-filter">
					<p>Filter by style</p>
					<button class="tag-button active" data-tag="all">All</button>
					{[...new Set(artists.flatMap(post => post.data.tags))].map((tag) => (
						<button class="tag-button" data-tag={tag}>{tag}</button>
					))}
				</div>
			</div>
		</main>
		<script>
			const artistsList = document.getElementById("artists-list");
			if (artistsList) {
				const tagButtons = document.querySelectorAll(".tag-button");
				const artists = artistsList.querySelectorAll(".artist-card");

				// Function to remove the 'active' class from all buttons
				function removeActiveClass() {
					tagButtons.forEach(button => button.classList.remove("active"));
				}
				tagButtons.forEach(button => {
					button.addEventListener("click", (e) => {
						const target = e.target as HTMLElement | null;
						const selectedTag = target?.getAttribute("data-tag") || "";

						removeActiveClass();
						target?.classList.add("active");

						artists.forEach(post => {
							const postTags = post.getAttribute("data-tags")?.split(",") || [];
							if (selectedTag === "all" || postTags.includes(selectedTag)) {
								post.classList.add("show");
								post.classList.remove("hide");
							} else {
								post.classList.add("hide");
								post.classList.remove("show");
							}
						});
					});
				});
			}
		</script>
	</body>
</html>
